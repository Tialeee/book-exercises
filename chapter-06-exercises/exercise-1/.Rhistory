calculate_earnings_v2 <- function(hours, pay_rate) {
c=earnings <- hours * pay_rate # You have to assign a returned value to a variable to use it
print(earnings)# printing a value is different from returning a value
}
calculate_earnings_v2 <- function(hours, pay_rate) {
c=earnings <- hours * pay_rate # You have to assign a returned value to a variable to use it
print(earnings)# printing a value is different from returning a value
}
employee3_earnings <- calculate_earnings_v2(60.0, 12.00)
employee3_earnings <- calculate_earnings_v2(60.0, 12.00)
watch <- function(documentary) {
result <- print( paste( "The last documentary I Watched is called", doucumentary))
return(result)
}
current_show <- watch("Free Solo")
print(current_show)
watch <- function(documentary) {
result <- print( paste( "The last documentary I Watched is called", documentary))
return(result)
}
current_show <- watch("Free Solo")
watch <- function(documentary) {
result <- print( paste( "The last documentary I Watched is called", documentary))
return(result)
}
current_show <- watch("Free Solo")
print(current_show)
watch <- function(documentary) {
result <- print( paste( "The last documentary I watched is called", documentary))
return(result)
}
classify_shows <- function(show_name, minutes) {
if (minutes < 80) {
print("This show is likely a TV series")
}  else {
print("This show is likely a movie")
}
return(c(title, minutes))
}
# **Question 6.** What will be returned when you run the following lines?
#
#   **Answer:** ______________________________________
classify_shows("Last Breath", 80)
classify_shows("Unbelievable", 50)
classify_shows <- function(show_name, minutes) {
if (minutes < 80) {
print("This show is likely a TV series")
}  else {
print("This show is likely a movie")
}
return(c(title, minutes))
}
classify_shows <- function(show_name, minutes) {
if (minutes < 80) {
print("This show is likely a TV series")
}  else {
print("This show is likely a movie")
}
return(c(show_name, minutes))
}
classify_shows <- function(show_name, minutes) {
if (minutes < 80) {
print("This show is likely a TV series")
}  else {
print("This show is likely a movie")
}
return(c(show_name, minutes))
}
# **Question 6.** What will be returned when you run the following lines?
#
#   **Answer:** ______________________________________
classify_shows("Last Breath", 80)
classify_shows("Unbelievable", 50)
classify_shows <- function(show_name, minutes) {
title <- show_name
if (minutes < 80) {
print("This show is likely a TV series")
}  else {
print("This show is likely a movie")
}
return(c(title, minutes))
}
# **Question 6.** What will be returned when you run the following lines?
#
#   **Answer:** ______________________________________
classify_shows("Last Breath", 80)
classify_shows("Unbelievable", 50)
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
# Call calculate_ratio()
calculate_ratio(60, 12)
intro <- function(year, major) {
greet <- paste("Hello I am a ", year, "year, and my major is ", major, ".")
return(greet)
}
intro <- function(year, major) {
greet <- paste("Hello I am a ", year, "year, and my major is ", major, ".")
return(greet)
}
# Call intro() function
intro(Junior, Communicaiton)
intro <- function(year, major) {
greet <- paste("Hello I am a ", year, "year, and my major is ", major, ".")
return(greet)
}
intro <- function(year, major) {
greet <- paste( "Hello I am a" , year, "year, and my major is ", major, ".")
return(greet)
}
intro(Third, Communicaiton)
days_to_deadline <- function(deadline, today) { #the days_to_deadline function takes in two variables
days_remaining <- as.Date(deadline) - as.Date(today)  # calculate the numbers of days remaining based on the variables and store it to days_remaining
return(days_remaining)  # return days_remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
days_to_deadline <- function(deadline, today) { #the days_to_deadline function takes in two variables
days_remaining <- as.Date(deadline) - as.Date(today)  # calculate the numbers of days remaining based on the variables and store it to days_remaining
return(days_remaining)  # return days_remaining
print(days_remaining)
}
days_to_deadline <- function(deadline, today) { #the days_to_deadline function takes in two variables
days_remaining <- as.Date(deadline) - as.Date(today)  # calculate the numbers of days remaining based on the variables and store it to days_remaining
return(days_remaining)  # return days_remaining
print(days_remaining)
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
days_to_deadline <- function(deadline, today) { #the days_to_deadline function takes in two variables
days_remaining <- as.Date(deadline) - as.Date(today)  # calculate the numbers of days remaining based on the variables and store it to days_remaining
# return days_remaining
print(days_remaining)
}
days_to_deadline <- function(deadline, today) { #the days_to_deadline function takes in two variables
days_remaining <- as.Date(deadline) - as.Date(today)  # calculate the numbers of days remaining based on the variables and store it to days_remaining
# return days_remaining
print(days_remaining)
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
View(classify_shows)
days_to_deadline <- function(deadline, today) { #the days_to_deadline function takes in two variables
days_remaining <- as.Date(deadline) - as.Date(today)  # calculate the numbers of days remaining based on the variables and store it to days_remaining
print(days_remaining)
return(days_remaining) # return days_remaining
}
# 2. What will each of the following lines return?
#   Note, you may need to print the variables.
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
intro <- function(year, major) {
greet <- paste( "Hello I am a " , year, "year, and my major is ", major, ".")
return(greet)
}
# Call intro() function
intro(Third, Communicaiton)
intro <- function(year, major) {
greet <- paste( "Hello I am a " , year, "year, and my major is ", major, ".")
return(greet)
}
# Call intro() function
intro(third, Communicaiton)
intro <- function( year, major) {
greet <- paste( "Hello I am a " , year, "year, and my major is ", major, ".")
return(greet)
}
# Call intro() function
intro( third, Communicaiton)
intro <- function( year, major) {
greet <- paste( "Hello I am a " , year, "year, and my major is ", major, ".")
return(greet)
}
# Call intro() function
intro( third, Communicaiton)
intro <- function( year, major) {
greet <- paste( "Hello I am a " , year, "year, and my major is ", major, ".")
return(greet)
}
# Call intro() function
intro( third, Communicaiton)
intro <- function( year, major) {
greet <- paste( "Hello I am a " , year, "year, and my major is ", major, ".")
return(greet)
intro( third, Communicaiton)
intro( third, Communicaiton)
intro <- function (year, major) {
greet <- paste( "Hello I am a " , year, "year, and my major is ", major, ".")
return(greet)
# Call intro() function
intro (third, Communicaiton)
intro <- function(year, major) {
greet <- paste( "Hello I am a " , year, "year, and my major is ", major, ".")
return(greet)
}
# Call intro() function
intro(third, Communicaiton)
return(greet)
intro(third, Communicaiton)
intro <- function(year, major) {
greet <- print(paste( "Hello I am a " , year, "year, and my major is ", major, "."))
return(greet)
}
# Call intro() function
intro(third, Communicaiton)
intro <- function(year, major) {
greet <- print( paste( "Hello I am a " , year, "year, and my major is ", major, "."))
return(greet)
}
intro(third, Communicaiton)
intro(third, communicaiton)
?substr
?substr
?`substr<-`
?substr
?gsub
?gsub
?gsub
?gsub
?gsub
?gsub
}
}}}}}
?gsub
intro <- function(year, major) {
greet <- print( paste( "Hello I am a " , year, "year, and my major is ", major, "."))
return(greet)
}
intro <- function(year, major) {
greet <- print( paste( "Hello I am a " , year, "year, and my major is ", major, "."))
return(greet)
}
# Call intro() function
intro(third, communicaiton)
intro(3, communicaiton)
greet <- print( paste( "Hello I am a " , year, "year, and my major is ", major, "."))
return(greet)
}
# Call intro() function
intro(third, communicaiton)
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits)
Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- print(paste(intro, fruits_e))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
#  Define intro() function
intro <- function(year, major) {
greet <- print( Hello I am a {year} year and my major is {major}.))
return(greet)
}
intro <- function(year, major) {
greet <- paste( "Hello I am a", year, "year, and my major is", major, "."))
return(greet)
}
intro <- function(year, major) {
greet <- paste( "Hello I am a", year, "year, and my major is", major, ".")
return(greet)
}
intro <- function(year, major) {
greet <- paste( "Hello I am a", year, "year, and my major is", major, ".")
return(greet)
}
# Call intro() function
intro(third, communicaiton)
intro(third, communicaiton)
intro("third", "communicaiton")
intro <- function(year, major) {
greet <- print(paste( "Hello I am a", year, "year, and my major is", major, "."))
return(greet)
}
# Call intro() function
intro("third", "communicaiton")
# returns a value 3 greater than the input
add_three <- function(x) {
added <- x + 3
return(added)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# returns a value 3 greater than the input
add_three <- function(x) {
added <- x + 3
print(added)
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# returns a value 3 greater than the input
add_three <- function(x) {
return(x + 3)
}
# function
ten <- add_three(7)
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
return ((feet + inches)/3.281)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 7)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 7)
print(height_in_meters)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
return ((feet * 12 + inches) * 0.0254)
}
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
return ((feet * 12 + inches) * 0.0254)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 7)
print(height_in_meters)
ten <- 1:10
ten <- 1:10
ten <- c(1, 2, 2, 5, 10)
ten <- 1:10
print(ten)
ten <- 1:10
print(ten)
ten <- c(1, 2, 2, 5, 10)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Tia", "Amanda", "Kyle")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# next to you. Print the vector.
names <- c("Tia", "Amanda", "Kyle")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
print(n + 1)
?segments
?seq
x_range <- seq(-5, 10, 0.1)
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers(11)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Exercise 2: indexing and filtering vectors
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- 10:20
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- first_ten + next_ten
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
filters <- 2:5
some_numbers <- all_numbers[filter]
# of `all_numbers`
some_numbers <- all_numbers[2:5]
all_numbers <- first_ten + next_ten
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- 1:100 / 1:2 = 0
# Create a vector `even` that holds the even numbers from 1 to 100
even <- 1:100 / 2 = 0
even <- 1:100 / 2 < 1
# Create a vector `even` that holds the even numbers from 1 to 100
filter <- 1:100 / 2 < 1
even <- 1:100[filter]
y <- 1:100
filter <- 1:100 / 2 < 1
even <- 1:100[filter]
# Create a vector `even` that holds the even numbers from 1 to 100
y <- 1:100
filter <- 1:100 / 2 < 1
even <- y[filter]
# Create a vector `even` that holds the even numbers from 1 to 100
y <- 1:100
filter <- 1:100 / 2 = 0
even <- y[filter]
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
y <- 1:100
filter <- 1:100 / 2 == 0
even <- y[filter]
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, ,7 ,5 ,3 ,0 ,9)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7 ,5 ,3 ,0 ,9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# less than or equal to 5
phone_small <- phone_number <= 5
small <- phone_number[phone_small]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
phone_small <- phone_numbers <= 5
small <- phone_numbers[phone_small]
# Create a vector `even` that holds the even numbers from 1 to 100
filter <- c(TRUE, FALSE)
even <- 1:100[filter]
filter <- c(TRUE, FALSE)
even <- 1:100[filter]
y <- 1:100
filter <- c(FALSE, TRUE)
even <- y[filter]
# numbers in your `even` vector are even
all(even) %% 2 = 0
# numbers in your `even` vector are even
all(even) / 2 %% 0
?all
all(even / 2 %% 0 = TRUE)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even / 2 %% 0 == TRUE)
Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even / 2 %% 0 == TRUE)
all(even / 2 %% 0 na.rm = TRUE)
# numbers in your `even` vector are even
all(even / 2 %% 0 == TRUE)
# strictly greater than 5
phone_large <- phone_numbers > 5
large <- phone_numbers[phone_large]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- gsub(large, 5)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- gsub(large, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- gsub(large, "5", phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- gsub(large, "5", phone_numbers)
phone_numbers <- gsub(large[1:4], 5, phone_numbers)
phone_numbers <- gsub(large, "5", phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- gsub(large[1:4], "5", phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- gsub(large[1:4], "5", phone_numbers[1:7])
